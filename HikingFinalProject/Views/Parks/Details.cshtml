@using HikingFinalProject.DTOs.Routes
@model ParkDto
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Park Details";
    var mapboxToken = Configuration["Mapbox:Token"];
}

<div class="container mt-4">
    <h1>@Model.ParkName</h1>
    <p><strong>Location:</strong> @Model.Location</p>
    <p><strong>Description:</strong> @Model.Description</p>

    <hr />

    <!-- Park Map -->
    <h3>Park Map</h3>
    <div id="parkMap" style="width:100%; height:400px;"></div>

    <hr />

    <!-- Routes -->
    <div class="d-flex justify-content-between align-items-center">
        <h3>Routes in this Park</h3>
        <button class="btn btn-success"
                data-bs-toggle="modal"
                data-bs-target="#createRouteModal"
                data-parkid="@Model.ParkID">
            Add Route
        </button>
    </div>

    @if (Model.Routes?.Any() ?? false)
    {
        <table class="table table-striped table-bordered mt-3">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Difficulty</th>
                    <th>Distance (miles)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var route in Model.Routes)
                {
                    <tr>
                        <td>
                            <a asp-controller="HikingRoutes" asp-action="Details" asp-route-id="@route.RouteID">
                                @route.RouteName
                            </a>
                        </td>
                        <td>@route.Difficulty</td>
                        <td>@((route.Distance ?? 0).ToString("0.0"))</td>
                        <td>
                            <button class="btn btn-primary"
                                    data-bs-toggle="modal" data-bs-target="#editRouteModal"
                                    data-id="@route.RouteID" data-name="@route.RouteName"
                                    data-difficulty="@route.Difficulty" data-distance="@route.Distance"
                                    data-park="@Model.ParkID">
                                Edit
                            </button>
                            <button class="btn btn-danger"
                                    data-bs-toggle="modal" data-bs-target="#deleteRouteModal"
                                    data-id="@route.RouteID" data-name="@route.RouteName">
                                Delete
                            </button>
                            <button class="btn btn-success"
                                    data-bs-toggle="modal"
                                    data-bs-target="#routeImageUploadModal"
                                    data-routeid="@route.RouteID">
                                Upload Images
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No routes have been added to this park yet.</p>
    }

    <hr />

    <!-- Route Images -->
    <h3>Route Images</h3>
    <div id="parkImagesContainer" class="mt-3">
        @if (Model.Routes?.Any() ?? false)
        {
            foreach (var route in Model.Routes)
            {
                if (route.RecentImages?.Any() ?? false)
                {
                    <div class="mb-3">
                        <h5>@route.RouteName Images</h5>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var img in route.RecentImages)
                            {
                                <img src="@img.imageURL" alt="@img.caption"
                                     class="rounded" style="width:100px;height:100px;" />
                            }
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <p>No images available.</p>
        }
    </div>

    <hr />

    <a asp-controller="Parks" asp-action="Index" class="btn btn-secondary">Back to Parks</a>
</div>

@await Html.PartialAsync("_SharedModals")

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.21.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.21.0/mapbox-gl.css" rel="stylesheet" />

    <script>
        mapboxgl.accessToken = '@mapboxToken';

        var parkCoords = [@(Model.Longitude ?? 0), @(Model.Latitude ?? 0)];

        if (parkCoords[0] !== 0 && parkCoords[1] !== 0) {
            var map = new mapboxgl.Map({
                container: 'parkMap',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: parkCoords,
                zoom: 12
            });

            new mapboxgl.Marker()
                .setLngLat(parkCoords)
                .setPopup(new mapboxgl.Popup().setText('@Model.ParkName'))
                .addTo(map);

            @foreach (var route in Model.Routes ?? Enumerable.Empty<HikingRouteDto>())
            {
                    if (route.Coordinates?.Any() ?? false)
                    {
                            var firstCoord = route.Coordinates.First();
                            <text>
                            new mapboxgl.Marker({ color: 'blue' })
                                .setLngLat([@firstCoord.longitude, @firstCoord.latitude])
                                .setPopup(new mapboxgl.Popup().setText('@route.RouteName'))
                                .addTo(map);
                            </text>
                    }
            }
        }
    </script>
}

